// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ZCSActionKit;
@class ZCSActionKitClicked;
@class ZCSActionKitItem;
@class ZCSActionKitLoaded;
@class ZCSActionKitRequested;
@class ZCSActionKitShown;
@class ZCSAddItunesLibrary;
@class ZCSAddToPlaylist;
@class ZCSAddToQueue;
@class ZCSAdvItem;
@class ZCSAppOpened;
@class ZCSAppResume;
@class ZCSAuthenticationFailed;
@class ZCSAuthenticationInitiated;
@class ZCSAuthenticationSuccessful;
@class ZCSContentBlock;
@class ZCSContentBlockClick;
@class ZCSContextOpenplay;
@class ZCSCountryChange;
@class ZCSDownload;
@class ZCSEvent;
@class ZCSGoToArtistPage;
@class ZCSGoToReleasePage;
@class ZCSHighQuality;
@class ZCSHistoryButton;
@class ZCSItem;
@class ZCSLike;
@class ZCSLogout;
@class ZCSNavigation;
@class ZCSNoAds;
@class ZCSOfflineMode;
@class ZCSPlay;
@class ZCSPlayevent;
@class ZCSPreCaching;
@class ZCSPremiumSubscriptions;
@class ZCSProfileChanged;
@class ZCSProfileClicked;
@class ZCSPushOpened;
@class ZCSRateUs;
@class ZCSRepeat;
@class ZCSRewind;
@class ZCSScreenShown;
@class ZCSSearchActivated;
@class ZCSShare;
@class ZCSShuffle;
@class ZCSSmartCaching;
@class ZCSSponsorOffers;
@class ZCSSponsorPick;
@class ZCSStorageClear;
@class ZCSSubscriptionFailed;
@class ZCSSubscriptionInitiated;
@class ZCSSubscriptionSuccessful;
@class ZCSUnlimitedSkippings;
@class ZCSUse3GLTE;
@class ZCSVolumeChange;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ZCSApp

/** global enumerations */
typedef GPB_ENUM(ZCSApp) {
  ZCSApp_Openplay = 1,
  ZCSApp_Web = 2,
  ZCSApp_Featurephone = 3,
  ZCSApp_Fonoteka = 4,
};

GPBEnumDescriptor *ZCSApp_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSApp_IsValidValue(int32_t value);

#pragma mark - Enum ZCSOperatingSystem

typedef GPB_ENUM(ZCSOperatingSystem) {
  ZCSOperatingSystem_Ios = 1,
  ZCSOperatingSystem_Android = 2,

  /** for web events */
  ZCSOperatingSystem_Desktop = 3,
};

GPBEnumDescriptor *ZCSOperatingSystem_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSOperatingSystem_IsValidValue(int32_t value);

#pragma mark - Enum ZCSSrcType

/** Src_type usually reffers to particular content objects which can be played/scrolled/etc in player or can be included into content block */
typedef GPB_ENUM(ZCSSrcType) {
  ZCSSrcType_Track = 1,
  ZCSSrcType_Playlist = 2,
  ZCSSrcType_Release = 3,
  ZCSSrcType_Artist = 4,
};

GPBEnumDescriptor *ZCSSrcType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSSrcType_IsValidValue(int32_t value);

#pragma mark - Enum ZCSSrcChannel

/** needed to distinguish collection playevents from application content. In future new channels may appear like wave of radio. */
typedef GPB_ENUM(ZCSSrcChannel) {
  ZCSSrcChannel_General = 1,
  ZCSSrcChannel_Collection = 2,
};

GPBEnumDescriptor *ZCSSrcChannel_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSSrcChannel_IsValidValue(int32_t value);

#pragma mark - Enum ZCSItemType

/**
 * Item type is an alternative to src_type, occuring for the rest events which have larger objects e.g. content_block.
 * The reason for separation is to prevent possibility to mess up player-related events parameters.
 **/
typedef GPB_ENUM(ZCSItemType) {
  ZCSItemType_ItemTrack = 1,
  ZCSItemType_ItemPlaylist = 2,
  ZCSItemType_ItemRelease = 3,
  ZCSItemType_ItemArtist = 4,
  ZCSItemType_ItemContentBlock = 5,
  ZCSItemType_ItemHistorySession = 6,
  ZCSItemType_ItemSearchRequest = 7,
};

GPBEnumDescriptor *ZCSItemType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSItemType_IsValidValue(int32_t value);

#pragma mark - Enum ZCSSource

typedef GPB_ENUM(ZCSSource) {
  ZCSSource_Fb = 1,
  ZCSSource_Vk = 2,
  ZCSSource_Email = 3,
  ZCSSource_Phone = 4,
  ZCSSource_Other = 5,
  ZCSSource_Google = 6,
};

GPBEnumDescriptor *ZCSSource_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSSource_IsValidValue(int32_t value);

#pragma mark - Enum ZCSSubscriptionType

typedef GPB_ENUM(ZCSSubscriptionType) {
  ZCSSubscriptionType_Premium = 1,
  ZCSSubscriptionType_Trial = 2,
  ZCSSubscriptionType_Sponsor = 3,
  ZCSSubscriptionType_Freemium = 4,

  /** now we can split all events by type of subscription and registration status by 1 parameter */
  ZCSSubscriptionType_Unregistered = 5,
};

GPBEnumDescriptor *ZCSSubscriptionType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSSubscriptionType_IsValidValue(int32_t value);

#pragma mark - Enum ZCSContentBlockType

typedef GPB_ENUM(ZCSContentBlockType) {
  ZCSContentBlockType_Content = 1,
  ZCSContentBlockType_Situations = 2,
  ZCSContentBlockType_Carousel = 3,
  ZCSContentBlockType_ClientBlock = 4,
  ZCSContentBlockType_Banner = 5,
  ZCSContentBlockType_Recommender = 6,
};

GPBEnumDescriptor *ZCSContentBlockType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSContentBlockType_IsValidValue(int32_t value);

#pragma mark - Enum ZCSPlayAction

typedef GPB_ENUM(ZCSPlayAction) {
  ZCSPlayAction_Play = 1,
  ZCSPlayAction_Pause = 2,
};

GPBEnumDescriptor *ZCSPlayAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSPlayAction_IsValidValue(int32_t value);

#pragma mark - Enum ZCSOnOff

typedef GPB_ENUM(ZCSOnOff) {
  ZCSOnOff_On = 1,
  ZCSOnOff_Off = 2,
};

GPBEnumDescriptor *ZCSOnOff_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSOnOff_IsValidValue(int32_t value);

#pragma mark - Enum ZCSContextOpenplay_ConnectionType

typedef GPB_ENUM(ZCSContextOpenplay_ConnectionType) {
  ZCSContextOpenplay_ConnectionType_Network2G = 1,
  ZCSContextOpenplay_ConnectionType_Network3G = 2,
  ZCSContextOpenplay_ConnectionType_Network4G = 3,
  ZCSContextOpenplay_ConnectionType_Wifi = 4,
  ZCSContextOpenplay_ConnectionType_UnknownConnection = 5,
};

GPBEnumDescriptor *ZCSContextOpenplay_ConnectionType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSContextOpenplay_ConnectionType_IsValidValue(int32_t value);

#pragma mark - Enum ZCSContextOpenplay_ScreenType

/**
 * Screen type is an analytical entity used to group different screen_names.
 * Grid page (the one that aggregates content blocks) is usually a separate screen type (e.g. moods section while expanded transforms to grid).
 **/
typedef GPB_ENUM(ZCSContextOpenplay_ScreenType) {
  /** use in extreme cases when there is nothing to indicate the screen type */
  ZCSContextOpenplay_ScreenType_UnknownScreen = 1,

  /** moved to GRID type */
  ZCSContextOpenplay_ScreenType_MainPage = 2,

  /** moved to GRID type */
  ZCSContextOpenplay_ScreenType_Popular = 3,

  /** moved to GRID type */
  ZCSContextOpenplay_ScreenType_Moods = 4,
  ZCSContextOpenplay_ScreenType_Player = 5,
  ZCSContextOpenplay_ScreenType_PlayerHistory = 6,

  /** any expanded content block */
  ZCSContextOpenplay_ScreenType_ContentBlock = 7,
  ZCSContextOpenplay_ScreenType_Artist = 8,
  ZCSContextOpenplay_ScreenType_Playlist = 9,
  ZCSContextOpenplay_ScreenType_Release = 10,
  ZCSContextOpenplay_ScreenType_Profile = 11,
  ZCSContextOpenplay_ScreenType_Collection = 12,
  ZCSContextOpenplay_ScreenType_Search = 13,
  ZCSContextOpenplay_ScreenType_SponsorScreen = 14,
  ZCSContextOpenplay_ScreenType_Subscriptions = 15,

  /** for some technical screens */
  ZCSContextOpenplay_ScreenType_Other = 16,

  /** type for all grid type screens - main_page, moods, shazam etc... */
  ZCSContextOpenplay_ScreenType_Grid = 17,
  ZCSContextOpenplay_ScreenType_Lyrics = 18,
};

GPBEnumDescriptor *ZCSContextOpenplay_ScreenType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSContextOpenplay_ScreenType_IsValidValue(int32_t value);

#pragma mark - Enum ZCSContextOpenplay_ScreenSection

typedef GPB_ENUM(ZCSContextOpenplay_ScreenSection) {
  ZCSContextOpenplay_ScreenSection_All = 1,
  ZCSContextOpenplay_ScreenSection_InCollection = 2,
};

GPBEnumDescriptor *ZCSContextOpenplay_ScreenSection_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSContextOpenplay_ScreenSection_IsValidValue(int32_t value);

#pragma mark - Enum ZCSPlayevent_StopReason

/** you may find detailed examples in the documentation: https://dreams.atlassian.net/wiki/display/ZR/QA+guide+for+playevents+checking */
typedef GPB_ENUM(ZCSPlayevent_StopReason) {
  /** user has chosed next track (e.g. in the queue) but NOT next button */
  ZCSPlayevent_StopReason_StopStop = 1,

  /** end of the track */
  ZCSPlayevent_StopReason_StopEnd = 2,

  /** pause of the track */
  ZCSPlayevent_StopReason_StopPause = 3,

  /** stop due to error */
  ZCSPlayevent_StopReason_StopError = 4,

  /** track scrolling */
  ZCSPlayevent_StopReason_StopSeek = 5,

  /** next track button */
  ZCSPlayevent_StopReason_StopNext = 6,

  /** previous track button */
  ZCSPlayevent_StopReason_StopPrev = 7,
};

GPBEnumDescriptor *ZCSPlayevent_StopReason_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSPlayevent_StopReason_IsValidValue(int32_t value);

#pragma mark - Enum ZCSPlayevent_StartReason

/** you may find detailed examples in the documentation: https://dreams.atlassian.net/wiki/display/ZR/QA+guide+for+playevents+checking */
typedef GPB_ENUM(ZCSPlayevent_StartReason) {
  /** pressed play button after pausing the track */
  ZCSPlayevent_StartReason_StartResume = 1,

  /** started due to error */
  ZCSPlayevent_StartReason_StartError = 2,

  /** started after being scrolled */
  ZCSPlayevent_StartReason_StartSeek = 3,

  /** started after next track button */
  ZCSPlayevent_StartReason_StartNext = 4,

  /** started after previous track button */
  ZCSPlayevent_StartReason_StartPrev = 5,

  /** started after choice of a new track (e.g. in the queue) or after choosing to play any object e.g. playlist */
  ZCSPlayevent_StartReason_StartPlay = 6,
};

GPBEnumDescriptor *ZCSPlayevent_StartReason_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSPlayevent_StartReason_IsValidValue(int32_t value);

#pragma mark - Enum ZCSAuthenticationSuccessful_Type

typedef GPB_ENUM(ZCSAuthenticationSuccessful_Type) {
  ZCSAuthenticationSuccessful_Type_Login = 1,
  ZCSAuthenticationSuccessful_Type_Registration = 2,
};

GPBEnumDescriptor *ZCSAuthenticationSuccessful_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSAuthenticationSuccessful_Type_IsValidValue(int32_t value);

#pragma mark - Enum ZCSActionKit_Type

typedef GPB_ENUM(ZCSActionKit_Type) {
  ZCSActionKit_Type_Banner = 1,
  ZCSActionKit_Type_Popup = 2,
  ZCSActionKit_Type_BrandedPlaylist = 3,

  /** action menu is also form of action kit */
  ZCSActionKit_Type_ActionMenu = 4,
  ZCSActionKit_Type_Clip = 5,
};

GPBEnumDescriptor *ZCSActionKit_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSActionKit_Type_IsValidValue(int32_t value);

#pragma mark - Enum ZCSActionKitItem_Type

typedef GPB_ENUM(ZCSActionKitItem_Type) {
  ZCSActionKitItem_Type_Banner = 1,
  ZCSActionKitItem_Type_Button = 2,
  ZCSActionKitItem_Type_Audio = 3,
};

GPBEnumDescriptor *ZCSActionKitItem_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSActionKitItem_Type_IsValidValue(int32_t value);

#pragma mark - Enum ZCSAdvItem_Type

typedef GPB_ENUM(ZCSAdvItem_Type) {
  ZCSAdvItem_Type_Banner = 1,
  ZCSAdvItem_Type_Button = 2,
};

GPBEnumDescriptor *ZCSAdvItem_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSAdvItem_Type_IsValidValue(int32_t value);

#pragma mark - Enum ZCSContentBlockClick_Action

typedef GPB_ENUM(ZCSContentBlockClick_Action) {
  ZCSContentBlockClick_Action_ItemPick = 1,
  ZCSContentBlockClick_Action_Expand = 2,
  ZCSContentBlockClick_Action_Close = 3,
};

GPBEnumDescriptor *ZCSContentBlockClick_Action_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSContentBlockClick_Action_IsValidValue(int32_t value);

#pragma mark - Enum ZCSNavigation_Action

typedef GPB_ENUM(ZCSNavigation_Action) {
  ZCSNavigation_Action_Next = 1,
  ZCSNavigation_Action_Previous = 2,
};

GPBEnumDescriptor *ZCSNavigation_Action_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSNavigation_Action_IsValidValue(int32_t value);

#pragma mark - Enum ZCSLike_LikeAction

typedef GPB_ENUM(ZCSLike_LikeAction) {
  ZCSLike_LikeAction_Like = 1,
  ZCSLike_LikeAction_Dislike = 2,
};

GPBEnumDescriptor *ZCSLike_LikeAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSLike_LikeAction_IsValidValue(int32_t value);

#pragma mark - Enum ZCSShare_ShareAction

typedef GPB_ENUM(ZCSShare_ShareAction) {
  /** in case of click on share button (in action menu or on any page) */
  ZCSShare_ShareAction_ShareButton = 1,
  ZCSShare_ShareAction_Fb = 2,
  ZCSShare_ShareAction_Vk = 3,
  ZCSShare_ShareAction_Telegram = 4,
  ZCSShare_ShareAction_Whatsapp = 5,
  ZCSShare_ShareAction_Viber = 6,
  ZCSShare_ShareAction_GetLink = 7,
  ZCSShare_ShareAction_More = 8,
};

GPBEnumDescriptor *ZCSShare_ShareAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSShare_ShareAction_IsValidValue(int32_t value);

#pragma mark - Enum ZCSRepeat_RepeatAction

typedef GPB_ENUM(ZCSRepeat_RepeatAction) {
  ZCSRepeat_RepeatAction_Off = 1,
  ZCSRepeat_RepeatAction_Track = 2,
  ZCSRepeat_RepeatAction_Object = 3,
};

GPBEnumDescriptor *ZCSRepeat_RepeatAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSRepeat_RepeatAction_IsValidValue(int32_t value);

#pragma mark - Enum ZCSDownload_DownloadAction

typedef GPB_ENUM(ZCSDownload_DownloadAction) {
  ZCSDownload_DownloadAction_Add = 1,
  ZCSDownload_DownloadAction_Delete = 2,
};

GPBEnumDescriptor *ZCSDownload_DownloadAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSDownload_DownloadAction_IsValidValue(int32_t value);

#pragma mark - Enum ZCSProfileClicked_ActionButton

typedef GPB_ENUM(ZCSProfileClicked_ActionButton) {
  ZCSProfileClicked_ActionButton_Profile = 1,
  ZCSProfileClicked_ActionButton_Country = 2,
  ZCSProfileClicked_ActionButton_StorageSettings = 3,
  ZCSProfileClicked_ActionButton_HelpSupport = 4,
  ZCSProfileClicked_ActionButton_LicenseInformation = 5,
  ZCSProfileClicked_ActionButton_Acknowledgements = 6,
  ZCSProfileClicked_ActionButton_PremiumFeatures = 7,
  ZCSProfileClicked_ActionButton_TermsOfUse = 8,
  ZCSProfileClicked_ActionButton_PrivacyPolicy = 9,
};

GPBEnumDescriptor *ZCSProfileClicked_ActionButton_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSProfileClicked_ActionButton_IsValidValue(int32_t value);

#pragma mark - Enum ZCSProfileChanged_ChangeAction

typedef GPB_ENUM(ZCSProfileChanged_ChangeAction) {
  ZCSProfileChanged_ChangeAction_Photo = 1,
  ZCSProfileChanged_ChangeAction_Name = 2,
  ZCSProfileChanged_ChangeAction_Fb = 3,
  ZCSProfileChanged_ChangeAction_Vk = 4,
  ZCSProfileChanged_ChangeAction_Phone = 5,
  ZCSProfileChanged_ChangeAction_Email = 6,
  ZCSProfileChanged_ChangeAction_Password = 7,
};

GPBEnumDescriptor *ZCSProfileChanged_ChangeAction_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZCSProfileChanged_ChangeAction_IsValidValue(int32_t value);

#pragma mark - ZCSMainRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ZCSMainRoot : GPBRootObject
@end

#pragma mark - ZCSContextOpenplay

typedef GPB_ENUM(ZCSContextOpenplay_FieldNumber) {
  ZCSContextOpenplay_FieldNumber_Timestamp = 1,
  ZCSContextOpenplay_FieldNumber_Timezone = 2,
  ZCSContextOpenplay_FieldNumber_AppInstance = 3,
  ZCSContextOpenplay_FieldNumber_UserId = 4,
  ZCSContextOpenplay_FieldNumber_ScreenWidth = 5,
  ZCSContextOpenplay_FieldNumber_ScreenHeight = 6,
  ZCSContextOpenplay_FieldNumber_App = 7,
  ZCSContextOpenplay_FieldNumber_ConnectionType = 8,
  ZCSContextOpenplay_FieldNumber_AppRelease = 9,
  ZCSContextOpenplay_FieldNumber_OsVersion = 10,
  ZCSContextOpenplay_FieldNumber_CarrierMcc = 11,
  ZCSContextOpenplay_FieldNumber_CarrierMnc = 12,
  ZCSContextOpenplay_FieldNumber_Model = 13,
  ZCSContextOpenplay_FieldNumber_Os = 14,
  ZCSContextOpenplay_FieldNumber_Manufacturer = 15,
  ZCSContextOpenplay_FieldNumber_SubscriptionType = 16,
  ZCSContextOpenplay_FieldNumber_SubscriptionName = 17,
  ZCSContextOpenplay_FieldNumber_ScreenType = 18,
  ZCSContextOpenplay_FieldNumber_ScreenName = 19,
  ZCSContextOpenplay_FieldNumber_ScreenNameMeta = 20,
  ZCSContextOpenplay_FieldNumber_ScreenSection = 21,
  ZCSContextOpenplay_FieldNumber_SessionId = 22,
  ZCSContextOpenplay_FieldNumber_SessionNumber = 23,
  ZCSContextOpenplay_FieldNumber_IsBackground = 24,
};

/**
 * context message which includes general information about user device, and page where action was made
 **/
@interface ZCSContextOpenplay : GPBMessage

/** format: "2010-12-30 20:02:35.566867" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timestamp;
/** Test to see if @c timestamp has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamp;

/** e.g. "UTC+03:00" or "UTC−06:00" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timezone;
/** Test to see if @c timezone has been set. */
@property(nonatomic, readwrite) BOOL hasTimezone;

/** format IOS: "765B3DE7-8F94-48BD-8386-A6153A6CB5D5", format Android: "01b44590-973a-4dc0-a322-eb28dd3961ae" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appInstance;
/** Test to see if @c appInstance has been set. */
@property(nonatomic, readwrite) BOOL hasAppInstance;

/** format registered: "27150653", format not registered: - "A-gd2eOOPlEeW7RwAlkHdCZA" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;
/** Test to see if @c userId has been set. */
@property(nonatomic, readwrite) BOOL hasUserId;

@property(nonatomic, readwrite) uint32_t screenWidth;

@property(nonatomic, readwrite) BOOL hasScreenWidth;
@property(nonatomic, readwrite) uint32_t screenHeight;

@property(nonatomic, readwrite) BOOL hasScreenHeight;
@property(nonatomic, readwrite) ZCSApp app;

@property(nonatomic, readwrite) BOOL hasApp;
@property(nonatomic, readwrite) ZCSContextOpenplay_ConnectionType connectionType;

@property(nonatomic, readwrite) BOOL hasConnectionType;
/** Application version. Format: "1.11.5" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appRelease;
/** Test to see if @c appRelease has been set. */
@property(nonatomic, readwrite) BOOL hasAppRelease;

/** format for Android: "5.1.1"  format for IOS: "9.3.1" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *osVersion;
/** Test to see if @c osVersion has been set. */
@property(nonatomic, readwrite) BOOL hasOsVersion;

/** https://en.wikipedia.org/wiki/Mobile_country_code */
@property(nonatomic, readwrite, copy, null_resettable) NSString *carrierMcc;
/** Test to see if @c carrierMcc has been set. */
@property(nonatomic, readwrite) BOOL hasCarrierMcc;

/** https://en.wikipedia.org/wiki/Mobile_country_code */
@property(nonatomic, readwrite, copy, null_resettable) NSString *carrierMnc;
/** Test to see if @c carrierMnc has been set. */
@property(nonatomic, readwrite) BOOL hasCarrierMnc;

@property(nonatomic, readwrite, copy, null_resettable) NSString *model;
/** Test to see if @c model has been set. */
@property(nonatomic, readwrite) BOOL hasModel;

@property(nonatomic, readwrite) ZCSOperatingSystem os;

@property(nonatomic, readwrite) BOOL hasOs;
@property(nonatomic, readwrite, copy, null_resettable) NSString *manufacturer;
/** Test to see if @c manufacturer has been set. */
@property(nonatomic, readwrite) BOOL hasManufacturer;

/** current subscription type */
@property(nonatomic, readwrite) ZCSSubscriptionType subscriptionType;

@property(nonatomic, readwrite) BOOL hasSubscriptionType;
/** name of subscription as on backend */
@property(nonatomic, readwrite, copy, null_resettable) NSString *subscriptionName;
/** Test to see if @c subscriptionName has been set. */
@property(nonatomic, readwrite) BOOL hasSubscriptionName;

@property(nonatomic, readwrite) ZCSContextOpenplay_ScreenType screenType;

@property(nonatomic, readwrite) BOOL hasScreenType;
/** see the naming convention here: https://dreams.atlassian.net/wiki/display/ZR/Clickstream+2.0 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *screenName;
/** Test to see if @c screenName has been set. */
@property(nonatomic, readwrite) BOOL hasScreenName;

/** https://dreams.atlassian.net/wiki/display/ZR/Clickstream+2.0 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *screenNameMeta;
/** Test to see if @c screenNameMeta has been set. */
@property(nonatomic, readwrite) BOOL hasScreenNameMeta;

/** parameter to divide ALL and COLLECTION sections. */
@property(nonatomic, readwrite) ZCSContextOpenplay_ScreenSection screenSection;

@property(nonatomic, readwrite) BOOL hasScreenSection;
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;
/** Test to see if @c sessionId has been set. */
@property(nonatomic, readwrite) BOOL hasSessionId;

/** deprecated field */
@property(nonatomic, readwrite) uint32_t sessionNumber;

@property(nonatomic, readwrite) BOOL hasSessionNumber;
/** true for playevents send during background play */
@property(nonatomic, readwrite) BOOL isBackground;

@property(nonatomic, readwrite) BOOL hasIsBackground;
@end

#pragma mark - ZCSContextWeb

typedef GPB_ENUM(ZCSContextWeb_FieldNumber) {
  ZCSContextWeb_FieldNumber_Timestamp = 1,
  ZCSContextWeb_FieldNumber_Timezone = 2,
  ZCSContextWeb_FieldNumber_UserCookie = 3,
  ZCSContextWeb_FieldNumber_UserAgent = 4,
  ZCSContextWeb_FieldNumber_UserId = 5,
  ZCSContextWeb_FieldNumber_ScreenWidth = 6,
  ZCSContextWeb_FieldNumber_ScreenHeight = 7,
  ZCSContextWeb_FieldNumber_App = 8,
  ZCSContextWeb_FieldNumber_PageURL = 9,
  ZCSContextWeb_FieldNumber_SubscriptionType = 10,
  ZCSContextWeb_FieldNumber_SubscriptionName = 11,
  ZCSContextWeb_FieldNumber_RefererURL = 12,
  ZCSContextWeb_FieldNumber_UtmTags = 13,
  ZCSContextWeb_FieldNumber_MousePosX = 14,
  ZCSContextWeb_FieldNumber_MousePosY = 15,
  ZCSContextWeb_FieldNumber_IsEmbedded = 16,
};

/**
 * context message which includes general information about user device, and page where action was made
 **/
@interface ZCSContextWeb : GPBMessage

/** format: "2010-12-30 20:02:35.566867" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timestamp;
/** Test to see if @c timestamp has been set. */
@property(nonatomic, readwrite) BOOL hasTimestamp;

/** e.g. "UTC+03:00" or "UTC−06:00" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timezone;
/** Test to see if @c timezone has been set. */
@property(nonatomic, readwrite) BOOL hasTimezone;

/** format: "MjIyODk5ODg6MTQ2NDA3Mzc1MDp2Mjo6fSquFRzMzZZvgeru9c92pWX6n8Y" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userCookie;
/** Test to see if @c userCookie has been set. */
@property(nonatomic, readwrite) BOOL hasUserCookie;

/** format: "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userAgent;
/** Test to see if @c userAgent has been set. */
@property(nonatomic, readwrite) BOOL hasUserAgent;

/** format registered: "27150653", format not registered: - "A-gd2eOOPlEeW7RwAlkHdCZA" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;
/** Test to see if @c userId has been set. */
@property(nonatomic, readwrite) BOOL hasUserId;

@property(nonatomic, readwrite) uint32_t screenWidth;

@property(nonatomic, readwrite) BOOL hasScreenWidth;
@property(nonatomic, readwrite) uint32_t screenHeight;

@property(nonatomic, readwrite) BOOL hasScreenHeight;
@property(nonatomic, readwrite) ZCSApp app;

@property(nonatomic, readwrite) BOOL hasApp;
@property(nonatomic, readwrite, copy, null_resettable) NSString *pageURL;
/** Test to see if @c pageURL has been set. */
@property(nonatomic, readwrite) BOOL hasPageURL;

/** current subscription type */
@property(nonatomic, readwrite) ZCSSubscriptionType subscriptionType;

@property(nonatomic, readwrite) BOOL hasSubscriptionType;
/** name of subscription as on backend */
@property(nonatomic, readwrite, copy, null_resettable) NSString *subscriptionName;
/** Test to see if @c subscriptionName has been set. */
@property(nonatomic, readwrite) BOOL hasSubscriptionName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *refererURL;
/** Test to see if @c refererURL has been set. */
@property(nonatomic, readwrite) BOOL hasRefererURL;

@property(nonatomic, readwrite, copy, null_resettable) NSString *utmTags;
/** Test to see if @c utmTags has been set. */
@property(nonatomic, readwrite) BOOL hasUtmTags;

@property(nonatomic, readwrite) uint32_t mousePosX;

@property(nonatomic, readwrite) BOOL hasMousePosX;
@property(nonatomic, readwrite) uint32_t mousePosY;

@property(nonatomic, readwrite) BOOL hasMousePosY;
@property(nonatomic, readwrite) BOOL isEmbedded;

@property(nonatomic, readwrite) BOOL hasIsEmbedded;
@end

#pragma mark - ZCSPlayevent

typedef GPB_ENUM(ZCSPlayevent_FieldNumber) {
  ZCSPlayevent_FieldNumber_StartDate = 1,
  ZCSPlayevent_FieldNumber_AppInstance = 2,
  ZCSPlayevent_FieldNumber_UserId = 3,
  ZCSPlayevent_FieldNumber_TrackDuration = 4,
  ZCSPlayevent_FieldNumber_StopDate = 5,
  ZCSPlayevent_FieldNumber_App = 6,
  ZCSPlayevent_FieldNumber_StopPos = 7,
  ZCSPlayevent_FieldNumber_PhoneType = 8,
  ZCSPlayevent_FieldNumber_StopReason = 9,
  ZCSPlayevent_FieldNumber_TrackId = 10,
  ZCSPlayevent_FieldNumber_Timezone = 11,
  ZCSPlayevent_FieldNumber_StartPos = 12,
  ZCSPlayevent_FieldNumber_StartReason = 13,
  ZCSPlayevent_FieldNumber_SrcType = 14,
  ZCSPlayevent_FieldNumber_SrcId = 15,
  ZCSPlayevent_FieldNumber_IsStream = 16,
  ZCSPlayevent_FieldNumber_Delay = 17,
  ZCSPlayevent_FieldNumber_DelayPos = 18,
  ZCSPlayevent_FieldNumber_Context = 19,
  ZCSPlayevent_FieldNumber_ContentBlock = 20,
  ZCSPlayevent_FieldNumber_SrcChannel = 21,
};

/**
 * list of event messages
 **/
@interface ZCSPlayevent : GPBMessage

/** 2010-12-30 20:02:35.566867 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *startDate;
/** Test to see if @c startDate has been set. */
@property(nonatomic, readwrite) BOOL hasStartDate;

/** for web events: "MjIyODk5ODg6MTQ2NDA3Mzc1MDp2Mjo6fSquFRzMzZZvgeru9c92pWX6n8Y", format IOS: "765B3DE7-8F94-48BD-8386-A6153A6CB5D5", format Android: "01b44590-973a-4dc0-a322-eb28dd3961ae" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appInstance;
/** Test to see if @c appInstance has been set. */
@property(nonatomic, readwrite) BOOL hasAppInstance;

/** format registered: "27150653", format not registered: - "A-gd2eOOPlEeW7RwAlkHdCZA" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;
/** Test to see if @c userId has been set. */
@property(nonatomic, readwrite) BOOL hasUserId;

@property(nonatomic, readwrite) uint32_t trackDuration;

@property(nonatomic, readwrite) BOOL hasTrackDuration;
/** 2010-12-30 20:02:35.566867 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stopDate;
/** Test to see if @c stopDate has been set. */
@property(nonatomic, readwrite) BOOL hasStopDate;

@property(nonatomic, readwrite) ZCSApp app;

@property(nonatomic, readwrite) BOOL hasApp;
@property(nonatomic, readwrite) uint32_t stopPos;

@property(nonatomic, readwrite) BOOL hasStopPos;
@property(nonatomic, readwrite) ZCSOperatingSystem phoneType;

@property(nonatomic, readwrite) BOOL hasPhoneType;
@property(nonatomic, readwrite) ZCSPlayevent_StopReason stopReason;

@property(nonatomic, readwrite) BOOL hasStopReason;
@property(nonatomic, readwrite) uint32_t trackId;

@property(nonatomic, readwrite) BOOL hasTrackId;
/** just the number of timezone difference e.g. "3" for UTC+03:00 and "-6" UTC−06:00 (it should be string but no possibility to change) */
@property(nonatomic, readwrite) int32_t timezone;

@property(nonatomic, readwrite) BOOL hasTimezone;
@property(nonatomic, readwrite) uint32_t startPos;

@property(nonatomic, readwrite) BOOL hasStartPos;
@property(nonatomic, readwrite) ZCSPlayevent_StartReason startReason;

@property(nonatomic, readwrite) BOOL hasStartReason;
@property(nonatomic, readwrite) ZCSSrcType srcType;

@property(nonatomic, readwrite) BOOL hasSrcType;
@property(nonatomic, readwrite) int32_t srcId;

@property(nonatomic, readwrite) BOOL hasSrcId;
@property(nonatomic, readwrite) BOOL isStream;

@property(nonatomic, readwrite) BOOL hasIsStream;
/** seconds */
@property(nonatomic, readwrite) uint32_t delay;

@property(nonatomic, readwrite) BOOL hasDelay;
@property(nonatomic, readwrite) uint32_t delayPos;

@property(nonatomic, readwrite) BOOL hasDelayPos;
/** optional because we cannot modify existing events */
@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

/** to track playevents for particular content blocks */
@property(nonatomic, readwrite, strong, null_resettable) ZCSContentBlock *contentBlock;
/** Test to see if @c contentBlock has been set. */
@property(nonatomic, readwrite) BOOL hasContentBlock;

/** needed to distinguish collection playevents from application content. */
@property(nonatomic, readwrite) ZCSSrcChannel srcChannel;

@property(nonatomic, readwrite) BOOL hasSrcChannel;
@end

#pragma mark - ZCSAppOpened

typedef GPB_ENUM(ZCSAppOpened_FieldNumber) {
  ZCSAppOpened_FieldNumber_Context = 1,
  ZCSAppOpened_FieldNumber_FirstTime = 2,
  ZCSAppOpened_FieldNumber_LoggedIn = 3,
};

/**
 * initial boot of application
 **/
@interface ZCSAppOpened : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

/** first application open after install */
@property(nonatomic, readwrite) BOOL firstTime;

@property(nonatomic, readwrite) BOOL hasFirstTime;
@property(nonatomic, readwrite) BOOL loggedIn;

@property(nonatomic, readwrite) BOOL hasLoggedIn;
@end

#pragma mark - ZCSAppResume

typedef GPB_ENUM(ZCSAppResume_FieldNumber) {
  ZCSAppResume_FieldNumber_Context = 1,
  ZCSAppResume_FieldNumber_LoggedIn = 2,
};

/**
 * user reopens the app while it is still running in device memory
 **/
@interface ZCSAppResume : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) BOOL loggedIn;

@property(nonatomic, readwrite) BOOL hasLoggedIn;
@end

#pragma mark - ZCSAuthenticationInitiated

typedef GPB_ENUM(ZCSAuthenticationInitiated_FieldNumber) {
  ZCSAuthenticationInitiated_FieldNumber_Context = 1,
  ZCSAuthenticationInitiated_FieldNumber_Source = 2,
  ZCSAuthenticationInitiated_FieldNumber_SourceName = 3,
};

@interface ZCSAuthenticationInitiated : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSSource source;

@property(nonatomic, readwrite) BOOL hasSource;
@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceName;
/** Test to see if @c sourceName has been set. */
@property(nonatomic, readwrite) BOOL hasSourceName;

@end

#pragma mark - ZCSAuthenticationSuccessful

typedef GPB_ENUM(ZCSAuthenticationSuccessful_FieldNumber) {
  ZCSAuthenticationSuccessful_FieldNumber_Context = 1,
  ZCSAuthenticationSuccessful_FieldNumber_Source = 2,
  ZCSAuthenticationSuccessful_FieldNumber_Type = 3,
  ZCSAuthenticationSuccessful_FieldNumber_SourceName = 4,
};

@interface ZCSAuthenticationSuccessful : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSSource source;

@property(nonatomic, readwrite) BOOL hasSource;
@property(nonatomic, readwrite) ZCSAuthenticationSuccessful_Type type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceName;
/** Test to see if @c sourceName has been set. */
@property(nonatomic, readwrite) BOOL hasSourceName;

@end

#pragma mark - ZCSAuthenticationFailed

typedef GPB_ENUM(ZCSAuthenticationFailed_FieldNumber) {
  ZCSAuthenticationFailed_FieldNumber_Context = 1,
  ZCSAuthenticationFailed_FieldNumber_Source = 2,
  ZCSAuthenticationFailed_FieldNumber_Reason = 3,
  ZCSAuthenticationFailed_FieldNumber_SourceName = 4,
};

@interface ZCSAuthenticationFailed : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSSource source;

@property(nonatomic, readwrite) BOOL hasSource;
@property(nonatomic, readwrite, copy, null_resettable) NSString *reason;
/** Test to see if @c reason has been set. */
@property(nonatomic, readwrite) BOOL hasReason;

@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceName;
/** Test to see if @c sourceName has been set. */
@property(nonatomic, readwrite) BOOL hasSourceName;

@end

#pragma mark - ZCSSubscriptionInitiated

typedef GPB_ENUM(ZCSSubscriptionInitiated_FieldNumber) {
  ZCSSubscriptionInitiated_FieldNumber_Context = 1,
  ZCSSubscriptionInitiated_FieldNumber_InitSubscriptionType = 2,
  ZCSSubscriptionInitiated_FieldNumber_IsRestore = 3,
};

@interface ZCSSubscriptionInitiated : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

/** type of initiated subscription */
@property(nonatomic, readwrite) ZCSSubscriptionType initSubscriptionType;

@property(nonatomic, readwrite) BOOL hasInitSubscriptionType;
/** In case user is trying to restore subscription */
@property(nonatomic, readwrite) BOOL isRestore;

@property(nonatomic, readwrite) BOOL hasIsRestore;
@end

#pragma mark - ZCSSubscriptionSuccessful

typedef GPB_ENUM(ZCSSubscriptionSuccessful_FieldNumber) {
  ZCSSubscriptionSuccessful_FieldNumber_Context = 1,
  ZCSSubscriptionSuccessful_FieldNumber_InitSubscriptionType = 2,
  ZCSSubscriptionSuccessful_FieldNumber_InitSubscriptionName = 3,
};

@interface ZCSSubscriptionSuccessful : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

/** type of initiated subscription */
@property(nonatomic, readwrite) ZCSSubscriptionType initSubscriptionType;

@property(nonatomic, readwrite) BOOL hasInitSubscriptionType;
/** name of subscription as on backend */
@property(nonatomic, readwrite, copy, null_resettable) NSString *initSubscriptionName;
/** Test to see if @c initSubscriptionName has been set. */
@property(nonatomic, readwrite) BOOL hasInitSubscriptionName;
- (NSString *)initSubscriptionName GPB_METHOD_FAMILY_NONE;

@end

#pragma mark - ZCSSubscriptionFailed

typedef GPB_ENUM(ZCSSubscriptionFailed_FieldNumber) {
  ZCSSubscriptionFailed_FieldNumber_Context = 1,
  ZCSSubscriptionFailed_FieldNumber_InitSubscriptionType = 2,
  ZCSSubscriptionFailed_FieldNumber_Reason = 3,
  ZCSSubscriptionFailed_FieldNumber_InitSubscriptionName = 4,
};

@interface ZCSSubscriptionFailed : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

/** type of initiated subscription */
@property(nonatomic, readwrite) ZCSSubscriptionType initSubscriptionType;

@property(nonatomic, readwrite) BOOL hasInitSubscriptionType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *reason;
/** Test to see if @c reason has been set. */
@property(nonatomic, readwrite) BOOL hasReason;

/** name of subscription as on backend; */
@property(nonatomic, readwrite, copy, null_resettable) NSString *initSubscriptionName;
/** Test to see if @c initSubscriptionName has been set. */
@property(nonatomic, readwrite) BOOL hasInitSubscriptionName;
- (NSString *)initSubscriptionName GPB_METHOD_FAMILY_NONE;

@end

#pragma mark - ZCSActionKit

typedef GPB_ENUM(ZCSActionKit_FieldNumber) {
  ZCSActionKit_FieldNumber_Type = 1,
  ZCSActionKit_FieldNumber_Name = 2,
  ZCSActionKit_FieldNumber_AdvItemArray = 3,
  ZCSActionKit_FieldNumber_ContentProvider = 4,
  ZCSActionKit_FieldNumber_ActionKitItemArray = 5,
  ZCSActionKit_FieldNumber_Comment = 6,
};

@interface ZCSActionKit : GPBMessage

@property(nonatomic, readwrite) ZCSActionKit_Type type;

@property(nonatomic, readwrite) BOOL hasType;
/** banner/pop-up name or id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZCSAdvItem*> *advItemArray;
/** The number of items in @c advItemArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger advItemArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *contentProvider;
/** Test to see if @c contentProvider has been set. */
@property(nonatomic, readwrite) BOOL hasContentProvider;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZCSActionKitItem*> *actionKitItemArray;
/** The number of items in @c actionKitItemArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger actionKitItemArray_Count;

/** ex. experiment_name (usually provided with admin panel) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *comment;
/** Test to see if @c comment has been set. */
@property(nonatomic, readwrite) BOOL hasComment;

@end

#pragma mark - ZCSActionKitShown

typedef GPB_ENUM(ZCSActionKitShown_FieldNumber) {
  ZCSActionKitShown_FieldNumber_Context = 1,
  ZCSActionKitShown_FieldNumber_ActionKit = 2,
};

@interface ZCSActionKitShown : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKit *actionKit;
/** Test to see if @c actionKit has been set. */
@property(nonatomic, readwrite) BOOL hasActionKit;

@end

#pragma mark - ZCSActionKitClicked

typedef GPB_ENUM(ZCSActionKitClicked_FieldNumber) {
  ZCSActionKitClicked_FieldNumber_Context = 1,
  ZCSActionKitClicked_FieldNumber_ActionKit = 2,
};

@interface ZCSActionKitClicked : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKit *actionKit;
/** Test to see if @c actionKit has been set. */
@property(nonatomic, readwrite) BOOL hasActionKit;

@end

#pragma mark - ZCSActionKitRequested

typedef GPB_ENUM(ZCSActionKitRequested_FieldNumber) {
  ZCSActionKitRequested_FieldNumber_Context = 1,
  ZCSActionKitRequested_FieldNumber_ActionKit = 2,
};

@interface ZCSActionKitRequested : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKit *actionKit;
/** Test to see if @c actionKit has been set. */
@property(nonatomic, readwrite) BOOL hasActionKit;

@end

#pragma mark - ZCSActionKitLoaded

typedef GPB_ENUM(ZCSActionKitLoaded_FieldNumber) {
  ZCSActionKitLoaded_FieldNumber_Context = 1,
  ZCSActionKitLoaded_FieldNumber_ActionKit = 2,
};

@interface ZCSActionKitLoaded : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKit *actionKit;
/** Test to see if @c actionKit has been set. */
@property(nonatomic, readwrite) BOOL hasActionKit;

@end

#pragma mark - ZCSContentBlock

typedef GPB_ENUM(ZCSContentBlock_FieldNumber) {
  ZCSContentBlock_FieldNumber_Type = 1,
  ZCSContentBlock_FieldNumber_Header = 2,
  ZCSContentBlock_FieldNumber_HeaderMeta = 3,
  ZCSContentBlock_FieldNumber_Position = 4,
  ZCSContentBlock_FieldNumber_ItemArray = 5,
};

@interface ZCSContentBlock : GPBMessage

@property(nonatomic, readwrite) ZCSContentBlockType type;

@property(nonatomic, readwrite) BOOL hasType;
/** see the naming convention here: https://dreams.atlassian.net/wiki/display/ZR/Clickstream+2.0 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** https://dreams.atlassian.net/wiki/display/ZR/Clickstream+2.0 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *headerMeta;
/** Test to see if @c headerMeta has been set. */
@property(nonatomic, readwrite) BOOL hasHeaderMeta;

/** position in grid */
@property(nonatomic, readwrite) uint32_t position;

@property(nonatomic, readwrite) BOOL hasPosition;
/** message item describes content units in content block. It may be skipped for Playevents */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZCSItem*> *itemArray;
/** The number of items in @c itemArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemArray_Count;

@end

#pragma mark - ZCSActionKitItem

typedef GPB_ENUM(ZCSActionKitItem_FieldNumber) {
  ZCSActionKitItem_FieldNumber_Type = 1,
  ZCSActionKitItem_FieldNumber_Header = 2,
  ZCSActionKitItem_FieldNumber_Body = 3,
  ZCSActionKitItem_FieldNumber_ActionKitSource = 4,
  ZCSActionKitItem_FieldNumber_ActionKitLink = 5,
};

@interface ZCSActionKitItem : GPBMessage

@property(nonatomic, readwrite) ZCSActionKitItem_Type type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@property(nonatomic, readwrite, copy, null_resettable) NSString *body;
/** Test to see if @c body has been set. */
@property(nonatomic, readwrite) BOOL hasBody;

@property(nonatomic, readwrite, copy, null_resettable) NSString *actionKitSource;
/** Test to see if @c actionKitSource has been set. */
@property(nonatomic, readwrite) BOOL hasActionKitSource;

@property(nonatomic, readwrite, copy, null_resettable) NSString *actionKitLink;
/** Test to see if @c actionKitLink has been set. */
@property(nonatomic, readwrite) BOOL hasActionKitLink;

@end

#pragma mark - ZCSAdvItem

typedef GPB_ENUM(ZCSAdvItem_FieldNumber) {
  ZCSAdvItem_FieldNumber_Type = 1,
  ZCSAdvItem_FieldNumber_Header = 2,
  ZCSAdvItem_FieldNumber_Body = 3,
  ZCSAdvItem_FieldNumber_ImgSource = 4,
  ZCSAdvItem_FieldNumber_DestinationURL = 5,
  ZCSAdvItem_FieldNumber_SrcType = 6,
  ZCSAdvItem_FieldNumber_SrcId = 7,
};

/**
 * deprecated since 1.10
 **/
@interface ZCSAdvItem : GPBMessage

@property(nonatomic, readwrite) ZCSAdvItem_Type type;

@property(nonatomic, readwrite) BOOL hasType;
/** banner name/id or button text */
@property(nonatomic, readwrite, copy, null_resettable) NSString *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

/** banner body text */
@property(nonatomic, readwrite, copy, null_resettable) NSString *body;
/** Test to see if @c body has been set. */
@property(nonatomic, readwrite) BOOL hasBody;

/** source for image (usually provided by admin panel) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *imgSource;
/** Test to see if @c imgSource has been set. */
@property(nonatomic, readwrite) BOOL hasImgSource;

/** link on external source */
@property(nonatomic, readwrite, copy, null_resettable) NSString *destinationURL;
/** Test to see if @c destinationURL has been set. */
@property(nonatomic, readwrite) BOOL hasDestinationURL;

/** type of content where banner/button is leading (in case it is not an external link) */
@property(nonatomic, readwrite) ZCSSrcType srcType;

@property(nonatomic, readwrite) BOOL hasSrcType;
/** id of content where banner/button is leading (in case it is not an external link) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

@end

#pragma mark - ZCSItem

typedef GPB_ENUM(ZCSItem_FieldNumber) {
  ZCSItem_FieldNumber_ItemType = 1,
  ZCSItem_FieldNumber_Featured = 2,
  ZCSItem_FieldNumber_Position = 3,
  ZCSItem_FieldNumber_SrcId = 4,
  ZCSItem_FieldNumber_DestinationURL = 5,
  ZCSItem_FieldNumber_Header = 6,
};

@interface ZCSItem : GPBMessage

/** picked item type */
@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
@property(nonatomic, readwrite) BOOL featured;

@property(nonatomic, readwrite) BOOL hasFeatured;
@property(nonatomic, readwrite) uint32_t position;

@property(nonatomic, readwrite) BOOL hasPosition;
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

/** url for banners featured in content block, grid link for content block */
@property(nonatomic, readwrite, copy, null_resettable) NSString *destinationURL;
/** Test to see if @c destinationURL has been set. */
@property(nonatomic, readwrite) BOOL hasDestinationURL;

/** for cases when content block have nested content blocks or for search queries. header = content block header. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *header;
/** Test to see if @c header has been set. */
@property(nonatomic, readwrite) BOOL hasHeader;

@end

#pragma mark - ZCSScreenShown

typedef GPB_ENUM(ZCSScreenShown_FieldNumber) {
  ZCSScreenShown_FieldNumber_Context = 1,
  ZCSScreenShown_FieldNumber_ContentBlockArray = 2,
  ZCSScreenShown_FieldNumber_PageNumber = 3,
};

@interface ZCSScreenShown : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZCSContentBlock*> *contentBlockArray;
/** The number of items in @c contentBlockArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger contentBlockArray_Count;

@property(nonatomic, readwrite) uint32_t pageNumber;

@property(nonatomic, readwrite) BOOL hasPageNumber;
@end

#pragma mark - ZCSContentBlockClick

typedef GPB_ENUM(ZCSContentBlockClick_FieldNumber) {
  ZCSContentBlockClick_FieldNumber_Context = 1,
  ZCSContentBlockClick_FieldNumber_ContentBlock = 2,
  ZCSContentBlockClick_FieldNumber_Action = 3,
};

@interface ZCSContentBlockClick : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, strong, null_resettable) ZCSContentBlock *contentBlock;
/** Test to see if @c contentBlock has been set. */
@property(nonatomic, readwrite) BOOL hasContentBlock;

@property(nonatomic, readwrite) ZCSContentBlockClick_Action action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSPlay

typedef GPB_ENUM(ZCSPlay_FieldNumber) {
  ZCSPlay_FieldNumber_Context = 1,
  ZCSPlay_FieldNumber_Action = 2,
  ZCSPlay_FieldNumber_ItemType = 3,
  ZCSPlay_FieldNumber_SrcId = 4,
  ZCSPlay_FieldNumber_TrackId = 5,
  ZCSPlay_FieldNumber_ContentBlock = 6,
};

@interface ZCSPlay : GPBMessage

/** Any action that results in content play */
@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSPlayAction action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
/** src_id for track, playlist, release, release and artist. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *trackId;
/** Test to see if @c trackId has been set. */
@property(nonatomic, readwrite) BOOL hasTrackId;

/** occurs in 2 options: when item was played inside content block or the whole content block was played */
@property(nonatomic, readwrite, strong, null_resettable) ZCSContentBlock *contentBlock;
/** Test to see if @c contentBlock has been set. */
@property(nonatomic, readwrite) BOOL hasContentBlock;

@end

#pragma mark - ZCSNavigation

typedef GPB_ENUM(ZCSNavigation_FieldNumber) {
  ZCSNavigation_FieldNumber_Context = 1,
  ZCSNavigation_FieldNumber_Action = 2,
  ZCSNavigation_FieldNumber_OldTrackId = 3,
  ZCSNavigation_FieldNumber_NewTrackId = 4,
};

@interface ZCSNavigation : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSNavigation_Action action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite, copy, null_resettable) NSString *oldTrackId;
/** Test to see if @c oldTrackId has been set. */
@property(nonatomic, readwrite) BOOL hasOldTrackId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *newTrackId NS_RETURNS_NOT_RETAINED;
/** Test to see if @c newTrackId has been set. */
@property(nonatomic, readwrite) BOOL hasNewTrackId;

@end

#pragma mark - ZCSRewind

typedef GPB_ENUM(ZCSRewind_FieldNumber) {
  ZCSRewind_FieldNumber_Context = 1,
  ZCSRewind_FieldNumber_SrcType = 2,
  ZCSRewind_FieldNumber_SrcId = 3,
  ZCSRewind_FieldNumber_TrackId = 4,
  ZCSRewind_FieldNumber_StartPos = 5,
  ZCSRewind_FieldNumber_EndPos = 6,
};

@interface ZCSRewind : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSSrcType srcType;

@property(nonatomic, readwrite) BOOL hasSrcType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *trackId;
/** Test to see if @c trackId has been set. */
@property(nonatomic, readwrite) BOOL hasTrackId;

@property(nonatomic, readwrite) uint32_t startPos;

@property(nonatomic, readwrite) BOOL hasStartPos;
@property(nonatomic, readwrite) uint32_t endPos;

@property(nonatomic, readwrite) BOOL hasEndPos;
@end

#pragma mark - ZCSVolumeChange

typedef GPB_ENUM(ZCSVolumeChange_FieldNumber) {
  ZCSVolumeChange_FieldNumber_Context = 1,
  ZCSVolumeChange_FieldNumber_VolumeBefore = 2,
  ZCSVolumeChange_FieldNumber_VolumeAfter = 3,
};

@interface ZCSVolumeChange : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) uint32_t volumeBefore;

@property(nonatomic, readwrite) BOOL hasVolumeBefore;
@property(nonatomic, readwrite) uint32_t volumeAfter;

@property(nonatomic, readwrite) BOOL hasVolumeAfter;
@end

#pragma mark - ZCSLike

typedef GPB_ENUM(ZCSLike_FieldNumber) {
  ZCSLike_FieldNumber_Context = 1,
  ZCSLike_FieldNumber_Action = 2,
  ZCSLike_FieldNumber_ItemType = 3,
  ZCSLike_FieldNumber_SrcId = 4,
  ZCSLike_FieldNumber_ActionMenu = 5,
};

@interface ZCSLike : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSLike_LikeAction action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
/** id for track, playlist, release, release and artist. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

/** True when the action was made via action menu, False - for actions via icon */
@property(nonatomic, readwrite) BOOL actionMenu;

@property(nonatomic, readwrite) BOOL hasActionMenu;
@end

#pragma mark - ZCSShare

typedef GPB_ENUM(ZCSShare_FieldNumber) {
  ZCSShare_FieldNumber_Context = 1,
  ZCSShare_FieldNumber_Action = 2,
  ZCSShare_FieldNumber_ItemType = 3,
  ZCSShare_FieldNumber_SrcId = 4,
  ZCSShare_FieldNumber_ContentBlock = 5,
  ZCSShare_FieldNumber_ActionMenu = 6,
};

@interface ZCSShare : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSShare_ShareAction action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
/** src_id for track, playlist, release, release and artist. Id for history session */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

/** Currently the feature is not avaliable but in future it may occur in case whole content block was shared */
@property(nonatomic, readwrite, strong, null_resettable) ZCSContentBlock *contentBlock;
/** Test to see if @c contentBlock has been set. */
@property(nonatomic, readwrite) BOOL hasContentBlock;

/** True when the action was made via action menu, False - for actions via icon */
@property(nonatomic, readwrite) BOOL actionMenu;

@property(nonatomic, readwrite) BOOL hasActionMenu;
@end

#pragma mark - ZCSShuffle

typedef GPB_ENUM(ZCSShuffle_FieldNumber) {
  ZCSShuffle_FieldNumber_Context = 1,
  ZCSShuffle_FieldNumber_Action = 2,
  ZCSShuffle_FieldNumber_ItemType = 3,
  ZCSShuffle_FieldNumber_SrcId = 4,
  ZCSShuffle_FieldNumber_TrackId = 5,
  ZCSShuffle_FieldNumber_ContentBlock = 6,
};

@interface ZCSShuffle : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSOnOff action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
/** id for track, playlist, release, release and artist. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *trackId;
/** Test to see if @c trackId has been set. */
@property(nonatomic, readwrite) BOOL hasTrackId;

/** Item type content block in case whole content block was shuffled */
@property(nonatomic, readwrite, strong, null_resettable) ZCSContentBlock *contentBlock;
/** Test to see if @c contentBlock has been set. */
@property(nonatomic, readwrite) BOOL hasContentBlock;

@end

#pragma mark - ZCSRepeat

typedef GPB_ENUM(ZCSRepeat_FieldNumber) {
  ZCSRepeat_FieldNumber_Context = 1,
  ZCSRepeat_FieldNumber_Action = 2,
  ZCSRepeat_FieldNumber_SrcType = 3,
  ZCSRepeat_FieldNumber_SrcId = 4,
  ZCSRepeat_FieldNumber_TrackId = 5,
};

@interface ZCSRepeat : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSRepeat_RepeatAction action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite) ZCSSrcType srcType;

@property(nonatomic, readwrite) BOOL hasSrcType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *trackId;
/** Test to see if @c trackId has been set. */
@property(nonatomic, readwrite) BOOL hasTrackId;

@end

#pragma mark - ZCSDownload

typedef GPB_ENUM(ZCSDownload_FieldNumber) {
  ZCSDownload_FieldNumber_Context = 1,
  ZCSDownload_FieldNumber_Action = 2,
  ZCSDownload_FieldNumber_ItemType = 3,
  ZCSDownload_FieldNumber_SrcId = 4,
  ZCSDownload_FieldNumber_ActionMenu = 5,
};

@interface ZCSDownload : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSDownload_DownloadAction action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
/** id for track, playlist, release, release. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

/** True when the action was made via action menu, False - for actions via icon */
@property(nonatomic, readwrite) BOOL actionMenu;

@property(nonatomic, readwrite) BOOL hasActionMenu;
@end

#pragma mark - ZCSAddToPlaylist

typedef GPB_ENUM(ZCSAddToPlaylist_FieldNumber) {
  ZCSAddToPlaylist_FieldNumber_Context = 1,
  ZCSAddToPlaylist_FieldNumber_ItemType = 2,
  ZCSAddToPlaylist_FieldNumber_SrcId = 3,
  ZCSAddToPlaylist_FieldNumber_ActionMenu = 4,
};

@interface ZCSAddToPlaylist : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
/** id for track, playlist, release, release. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

/** True when the action was made via action menu, False - for actions via icon */
@property(nonatomic, readwrite) BOOL actionMenu;

@property(nonatomic, readwrite) BOOL hasActionMenu;
@end

#pragma mark - ZCSAddToQueue

typedef GPB_ENUM(ZCSAddToQueue_FieldNumber) {
  ZCSAddToQueue_FieldNumber_Context = 1,
  ZCSAddToQueue_FieldNumber_ItemType = 2,
  ZCSAddToQueue_FieldNumber_SrcId = 3,
  ZCSAddToQueue_FieldNumber_ActionMenu = 4,
};

@interface ZCSAddToQueue : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSItemType itemType;

@property(nonatomic, readwrite) BOOL hasItemType;
/** id for track, playlist, release, release, artist. Id for history session */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

/** True when the action was made via action menu, False - for actions via icon */
@property(nonatomic, readwrite) BOOL actionMenu;

@property(nonatomic, readwrite) BOOL hasActionMenu;
@end

#pragma mark - ZCSGoToArtistPage

typedef GPB_ENUM(ZCSGoToArtistPage_FieldNumber) {
  ZCSGoToArtistPage_FieldNumber_Context = 1,
  ZCSGoToArtistPage_FieldNumber_ArtistId = 2,
  ZCSGoToArtistPage_FieldNumber_Item = 3,
  ZCSGoToArtistPage_FieldNumber_ActionMenu = 4,
};

@interface ZCSGoToArtistPage : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, copy, null_resettable) NSString *artistId;
/** Test to see if @c artistId has been set. */
@property(nonatomic, readwrite) BOOL hasArtistId;

/** Message item describes content units in content block. It may be skipped for Playevents */
@property(nonatomic, readwrite, strong, null_resettable) ZCSItem *item;
/** Test to see if @c item has been set. */
@property(nonatomic, readwrite) BOOL hasItem;

/** True when the action was made via action menu, False - for actions via icon */
@property(nonatomic, readwrite) BOOL actionMenu;

@property(nonatomic, readwrite) BOOL hasActionMenu;
@end

#pragma mark - ZCSGoToReleasePage

typedef GPB_ENUM(ZCSGoToReleasePage_FieldNumber) {
  ZCSGoToReleasePage_FieldNumber_Context = 1,
  ZCSGoToReleasePage_FieldNumber_ReleaseId = 2,
  ZCSGoToReleasePage_FieldNumber_Item = 3,
  ZCSGoToReleasePage_FieldNumber_ActionMenu = 4,
};

@interface ZCSGoToReleasePage : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, copy, null_resettable) NSString *releaseId;
/** Test to see if @c releaseId has been set. */
@property(nonatomic, readwrite) BOOL hasReleaseId;

/** Message item describes content units in content block. It may be skipped for Playevents */
@property(nonatomic, readwrite, strong, null_resettable) ZCSItem *item;
/** Test to see if @c item has been set. */
@property(nonatomic, readwrite) BOOL hasItem;

/** True when the action was made via action menu, False - for actions via icon */
@property(nonatomic, readwrite) BOOL actionMenu;

@property(nonatomic, readwrite) BOOL hasActionMenu;
@end

#pragma mark - ZCSOfflineMode

typedef GPB_ENUM(ZCSOfflineMode_FieldNumber) {
  ZCSOfflineMode_FieldNumber_Context = 1,
  ZCSOfflineMode_FieldNumber_Action = 2,
};

@interface ZCSOfflineMode : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSOnOff action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSUse3GLTE

typedef GPB_ENUM(ZCSUse3GLTE_FieldNumber) {
  ZCSUse3GLTE_FieldNumber_Context = 1,
  ZCSUse3GLTE_FieldNumber_Action = 2,
};

@interface ZCSUse3GLTE : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSOnOff action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSHighQuality

typedef GPB_ENUM(ZCSHighQuality_FieldNumber) {
  ZCSHighQuality_FieldNumber_Context = 1,
  ZCSHighQuality_FieldNumber_Action = 2,
};

@interface ZCSHighQuality : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSOnOff action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSUnlimitedSkippings

typedef GPB_ENUM(ZCSUnlimitedSkippings_FieldNumber) {
  ZCSUnlimitedSkippings_FieldNumber_Context = 1,
};

@interface ZCSUnlimitedSkippings : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@end

#pragma mark - ZCSNoAds

typedef GPB_ENUM(ZCSNoAds_FieldNumber) {
  ZCSNoAds_FieldNumber_Context = 1,
};

@interface ZCSNoAds : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@end

#pragma mark - ZCSAddItunesLibrary

typedef GPB_ENUM(ZCSAddItunesLibrary_FieldNumber) {
  ZCSAddItunesLibrary_FieldNumber_Context = 1,
  ZCSAddItunesLibrary_FieldNumber_Action = 2,
};

@interface ZCSAddItunesLibrary : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSOnOff action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSHistoryButton

typedef GPB_ENUM(ZCSHistoryButton_FieldNumber) {
  ZCSHistoryButton_FieldNumber_Context = 1,
};

@interface ZCSHistoryButton : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@end

#pragma mark - ZCSSearchActivated

typedef GPB_ENUM(ZCSSearchActivated_FieldNumber) {
  ZCSSearchActivated_FieldNumber_Context = 1,
  ZCSSearchActivated_FieldNumber_Query = 2,
};

@interface ZCSSearchActivated : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, copy, null_resettable) NSString *query;
/** Test to see if @c query has been set. */
@property(nonatomic, readwrite) BOOL hasQuery;

@end

#pragma mark - ZCSSponsorPick

typedef GPB_ENUM(ZCSSponsorPick_FieldNumber) {
  ZCSSponsorPick_FieldNumber_Context = 1,
  ZCSSponsorPick_FieldNumber_SponsorName = 2,
};

@interface ZCSSponsorPick : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, copy, null_resettable) NSString *sponsorName;
/** Test to see if @c sponsorName has been set. */
@property(nonatomic, readwrite) BOOL hasSponsorName;

@end

#pragma mark - ZCSSponsorOffers

typedef GPB_ENUM(ZCSSponsorOffers_FieldNumber) {
  ZCSSponsorOffers_FieldNumber_Context = 1,
};

@interface ZCSSponsorOffers : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@end

#pragma mark - ZCSPremiumSubscriptions

typedef GPB_ENUM(ZCSPremiumSubscriptions_FieldNumber) {
  ZCSPremiumSubscriptions_FieldNumber_Context = 1,
};

@interface ZCSPremiumSubscriptions : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@end

#pragma mark - ZCSProfileClicked

typedef GPB_ENUM(ZCSProfileClicked_FieldNumber) {
  ZCSProfileClicked_FieldNumber_Context = 1,
  ZCSProfileClicked_FieldNumber_Action = 2,
};

@interface ZCSProfileClicked : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSProfileClicked_ActionButton action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSProfileChanged

typedef GPB_ENUM(ZCSProfileChanged_FieldNumber) {
  ZCSProfileChanged_FieldNumber_Context = 1,
  ZCSProfileChanged_FieldNumber_ActionArray = 2,
};

@interface ZCSProfileChanged : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

// |actionArray| contains |ZCSProfileChanged_ChangeAction|
@property(nonatomic, readwrite, strong, null_resettable) GPBEnumArray *actionArray;
/** The number of items in @c actionArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger actionArray_Count;

@end

#pragma mark - ZCSPushOpened

typedef GPB_ENUM(ZCSPushOpened_FieldNumber) {
  ZCSPushOpened_FieldNumber_Context = 1,
  ZCSPushOpened_FieldNumber_SrcType = 2,
  ZCSPushOpened_FieldNumber_SrcId = 3,
  ZCSPushOpened_FieldNumber_DestinationURL = 4,
  ZCSPushOpened_FieldNumber_Alert = 5,
};

@interface ZCSPushOpened : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

/** destination content src_type where push was leading */
@property(nonatomic, readwrite) ZCSSrcType srcType;

@property(nonatomic, readwrite) BOOL hasSrcType;
/** //destination content src_id where push was leading */
@property(nonatomic, readwrite, copy, null_resettable) NSString *srcId;
/** Test to see if @c srcId has been set. */
@property(nonatomic, readwrite) BOOL hasSrcId;

/** destination url */
@property(nonatomic, readwrite, copy, null_resettable) NSString *destinationURL;
/** Test to see if @c destinationURL has been set. */
@property(nonatomic, readwrite) BOOL hasDestinationURL;

/** push text */
@property(nonatomic, readwrite, copy, null_resettable) NSString *alert;
/** Test to see if @c alert has been set. */
@property(nonatomic, readwrite) BOOL hasAlert;

@end

#pragma mark - ZCSLogout

typedef GPB_ENUM(ZCSLogout_FieldNumber) {
  ZCSLogout_FieldNumber_Context = 1,
};

@interface ZCSLogout : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@end

#pragma mark - ZCSStorageClear

typedef GPB_ENUM(ZCSStorageClear_FieldNumber) {
  ZCSStorageClear_FieldNumber_Context = 1,
};

@interface ZCSStorageClear : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@end

#pragma mark - ZCSSmartCaching

typedef GPB_ENUM(ZCSSmartCaching_FieldNumber) {
  ZCSSmartCaching_FieldNumber_Context = 1,
  ZCSSmartCaching_FieldNumber_Action = 2,
};

@interface ZCSSmartCaching : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSOnOff action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSPreCaching

typedef GPB_ENUM(ZCSPreCaching_FieldNumber) {
  ZCSPreCaching_FieldNumber_Context = 1,
  ZCSPreCaching_FieldNumber_Action = 2,
};

@interface ZCSPreCaching : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) ZCSOnOff action;

@property(nonatomic, readwrite) BOOL hasAction;
@end

#pragma mark - ZCSCountryChange

typedef GPB_ENUM(ZCSCountryChange_FieldNumber) {
  ZCSCountryChange_FieldNumber_Context = 1,
  ZCSCountryChange_FieldNumber_Country = 2,
};

@interface ZCSCountryChange : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite, copy, null_resettable) NSString *country;
/** Test to see if @c country has been set. */
@property(nonatomic, readwrite) BOOL hasCountry;

@end

#pragma mark - ZCSRateUs

typedef GPB_ENUM(ZCSRateUs_FieldNumber) {
  ZCSRateUs_FieldNumber_Context = 1,
  ZCSRateUs_FieldNumber_Rating = 2,
};

@interface ZCSRateUs : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ZCSContextOpenplay *context;
/** Test to see if @c context has been set. */
@property(nonatomic, readwrite) BOOL hasContext;

@property(nonatomic, readwrite) uint32_t rating;

@property(nonatomic, readwrite) BOOL hasRating;
@end

#pragma mark - ZCSEvent

typedef GPB_ENUM(ZCSEvent_FieldNumber) {
  ZCSEvent_FieldNumber_Playevent = 1,
  ZCSEvent_FieldNumber_AppOpened = 2,
  ZCSEvent_FieldNumber_AuthenticationInitiated = 3,
  ZCSEvent_FieldNumber_AuthenticationSuccessful = 4,
  ZCSEvent_FieldNumber_AuthenticationFailed = 5,
  ZCSEvent_FieldNumber_SubscriptionInitiated = 6,
  ZCSEvent_FieldNumber_SubscriptionSuccessful = 7,
  ZCSEvent_FieldNumber_SubscriptionFailed = 8,
  ZCSEvent_FieldNumber_ActionKitShown = 9,
  ZCSEvent_FieldNumber_ActionKitClicked = 10,
  ZCSEvent_FieldNumber_ScreenShown = 11,
  ZCSEvent_FieldNumber_ContentBlockClick = 12,
  ZCSEvent_FieldNumber_Play = 13,
  ZCSEvent_FieldNumber_Navigation = 14,
  ZCSEvent_FieldNumber_Rewind = 15,
  ZCSEvent_FieldNumber_VolumeChange = 16,
  ZCSEvent_FieldNumber_Like = 17,
  ZCSEvent_FieldNumber_Share = 18,
  ZCSEvent_FieldNumber_Shuffle = 19,
  ZCSEvent_FieldNumber_Repeat = 20,
  ZCSEvent_FieldNumber_Download = 21,
  ZCSEvent_FieldNumber_AddToPlaylist = 22,
  ZCSEvent_FieldNumber_AddToQueue = 23,
  ZCSEvent_FieldNumber_GoToArtistPage = 24,
  ZCSEvent_FieldNumber_GoToReleasePage = 25,
  ZCSEvent_FieldNumber_OfflineMode = 26,
  ZCSEvent_FieldNumber_Use3GLte = 27,
  ZCSEvent_FieldNumber_HighQuality = 28,
  ZCSEvent_FieldNumber_AddItunesLibrary = 29,
  ZCSEvent_FieldNumber_ProfileClicked = 30,
  ZCSEvent_FieldNumber_HistoryButton = 31,
  ZCSEvent_FieldNumber_SearchActivated = 32,
  ZCSEvent_FieldNumber_StorageClear = 33,
  ZCSEvent_FieldNumber_CountryChange = 34,
  ZCSEvent_FieldNumber_SponsorPick = 35,
  ZCSEvent_FieldNumber_SponsorOffers = 38,
  ZCSEvent_FieldNumber_PremiumSubscriptions = 39,
  ZCSEvent_FieldNumber_PushOpened = 40,
  ZCSEvent_FieldNumber_AppResume = 41,
  ZCSEvent_FieldNumber_Logout = 42,
  ZCSEvent_FieldNumber_ActionKitLoaded = 43,
  ZCSEvent_FieldNumber_ActionKitRequested = 44,
  ZCSEvent_FieldNumber_UnlimitedSkippings = 45,
  ZCSEvent_FieldNumber_NoAds = 46,
  ZCSEvent_FieldNumber_SmartCaching = 47,
  ZCSEvent_FieldNumber_PreCaching = 48,
  ZCSEvent_FieldNumber_ProfileChanged = 49,
  ZCSEvent_FieldNumber_RateUs = 50,
};

typedef GPB_ENUM(ZCSEvent_Event_OneOfCase) {
  ZCSEvent_Event_OneOfCase_GPBUnsetOneOfCase = 0,
  ZCSEvent_Event_OneOfCase_Playevent = 1,
  ZCSEvent_Event_OneOfCase_AppOpened = 2,
  ZCSEvent_Event_OneOfCase_AuthenticationInitiated = 3,
  ZCSEvent_Event_OneOfCase_AuthenticationSuccessful = 4,
  ZCSEvent_Event_OneOfCase_AuthenticationFailed = 5,
  ZCSEvent_Event_OneOfCase_SubscriptionInitiated = 6,
  ZCSEvent_Event_OneOfCase_SubscriptionSuccessful = 7,
  ZCSEvent_Event_OneOfCase_SubscriptionFailed = 8,
  ZCSEvent_Event_OneOfCase_ActionKitShown = 9,
  ZCSEvent_Event_OneOfCase_ActionKitClicked = 10,
  ZCSEvent_Event_OneOfCase_ScreenShown = 11,
  ZCSEvent_Event_OneOfCase_ContentBlockClick = 12,
  ZCSEvent_Event_OneOfCase_Play = 13,
  ZCSEvent_Event_OneOfCase_Navigation = 14,
  ZCSEvent_Event_OneOfCase_Rewind = 15,
  ZCSEvent_Event_OneOfCase_VolumeChange = 16,
  ZCSEvent_Event_OneOfCase_Like = 17,
  ZCSEvent_Event_OneOfCase_Share = 18,
  ZCSEvent_Event_OneOfCase_Shuffle = 19,
  ZCSEvent_Event_OneOfCase_Repeat = 20,
  ZCSEvent_Event_OneOfCase_Download = 21,
  ZCSEvent_Event_OneOfCase_AddToPlaylist = 22,
  ZCSEvent_Event_OneOfCase_AddToQueue = 23,
  ZCSEvent_Event_OneOfCase_GoToArtistPage = 24,
  ZCSEvent_Event_OneOfCase_GoToReleasePage = 25,
  ZCSEvent_Event_OneOfCase_OfflineMode = 26,
  ZCSEvent_Event_OneOfCase_Use3GLte = 27,
  ZCSEvent_Event_OneOfCase_HighQuality = 28,
  ZCSEvent_Event_OneOfCase_AddItunesLibrary = 29,
  ZCSEvent_Event_OneOfCase_ProfileClicked = 30,
  ZCSEvent_Event_OneOfCase_HistoryButton = 31,
  ZCSEvent_Event_OneOfCase_SearchActivated = 32,
  ZCSEvent_Event_OneOfCase_StorageClear = 33,
  ZCSEvent_Event_OneOfCase_CountryChange = 34,
  ZCSEvent_Event_OneOfCase_SponsorPick = 35,
  ZCSEvent_Event_OneOfCase_SponsorOffers = 38,
  ZCSEvent_Event_OneOfCase_PremiumSubscriptions = 39,
  ZCSEvent_Event_OneOfCase_PushOpened = 40,
  ZCSEvent_Event_OneOfCase_AppResume = 41,
  ZCSEvent_Event_OneOfCase_Logout = 42,
  ZCSEvent_Event_OneOfCase_ActionKitLoaded = 43,
  ZCSEvent_Event_OneOfCase_ActionKitRequested = 44,
  ZCSEvent_Event_OneOfCase_UnlimitedSkippings = 45,
  ZCSEvent_Event_OneOfCase_NoAds = 46,
  ZCSEvent_Event_OneOfCase_SmartCaching = 47,
  ZCSEvent_Event_OneOfCase_PreCaching = 48,
  ZCSEvent_Event_OneOfCase_ProfileChanged = 49,
  ZCSEvent_Event_OneOfCase_RateUs = 50,
};

@interface ZCSEvent : GPBMessage

@property(nonatomic, readonly) ZCSEvent_Event_OneOfCase eventOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ZCSPlayevent *playevent;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAppOpened *appOpened;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAuthenticationInitiated *authenticationInitiated;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAuthenticationSuccessful *authenticationSuccessful;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAuthenticationFailed *authenticationFailed;

@property(nonatomic, readwrite, strong, null_resettable) ZCSSubscriptionInitiated *subscriptionInitiated;

@property(nonatomic, readwrite, strong, null_resettable) ZCSSubscriptionSuccessful *subscriptionSuccessful;

@property(nonatomic, readwrite, strong, null_resettable) ZCSSubscriptionFailed *subscriptionFailed;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKitShown *actionKitShown;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKitClicked *actionKitClicked;

@property(nonatomic, readwrite, strong, null_resettable) ZCSScreenShown *screenShown;

@property(nonatomic, readwrite, strong, null_resettable) ZCSContentBlockClick *contentBlockClick;

@property(nonatomic, readwrite, strong, null_resettable) ZCSPlay *play;

@property(nonatomic, readwrite, strong, null_resettable) ZCSNavigation *navigation;

@property(nonatomic, readwrite, strong, null_resettable) ZCSRewind *rewind;

@property(nonatomic, readwrite, strong, null_resettable) ZCSVolumeChange *volumeChange;

@property(nonatomic, readwrite, strong, null_resettable) ZCSLike *like;

@property(nonatomic, readwrite, strong, null_resettable) ZCSShare *share;

@property(nonatomic, readwrite, strong, null_resettable) ZCSShuffle *shuffle;

@property(nonatomic, readwrite, strong, null_resettable) ZCSRepeat *repeat;

@property(nonatomic, readwrite, strong, null_resettable) ZCSDownload *download;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAddToPlaylist *addToPlaylist;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAddToQueue *addToQueue;

@property(nonatomic, readwrite, strong, null_resettable) ZCSGoToArtistPage *goToArtistPage;

@property(nonatomic, readwrite, strong, null_resettable) ZCSGoToReleasePage *goToReleasePage;

@property(nonatomic, readwrite, strong, null_resettable) ZCSOfflineMode *offlineMode;

@property(nonatomic, readwrite, strong, null_resettable) ZCSUse3GLTE *use3GLte;

@property(nonatomic, readwrite, strong, null_resettable) ZCSHighQuality *highQuality;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAddItunesLibrary *addItunesLibrary;

@property(nonatomic, readwrite, strong, null_resettable) ZCSProfileClicked *profileClicked;

@property(nonatomic, readwrite, strong, null_resettable) ZCSHistoryButton *historyButton;

@property(nonatomic, readwrite, strong, null_resettable) ZCSSearchActivated *searchActivated;

@property(nonatomic, readwrite, strong, null_resettable) ZCSStorageClear *storageClear;

@property(nonatomic, readwrite, strong, null_resettable) ZCSCountryChange *countryChange;

@property(nonatomic, readwrite, strong, null_resettable) ZCSSponsorPick *sponsorPick;

@property(nonatomic, readwrite, strong, null_resettable) ZCSSponsorOffers *sponsorOffers;

@property(nonatomic, readwrite, strong, null_resettable) ZCSPremiumSubscriptions *premiumSubscriptions;

@property(nonatomic, readwrite, strong, null_resettable) ZCSPushOpened *pushOpened;

@property(nonatomic, readwrite, strong, null_resettable) ZCSAppResume *appResume;

@property(nonatomic, readwrite, strong, null_resettable) ZCSLogout *logout;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKitLoaded *actionKitLoaded;

@property(nonatomic, readwrite, strong, null_resettable) ZCSActionKitRequested *actionKitRequested;

@property(nonatomic, readwrite, strong, null_resettable) ZCSUnlimitedSkippings *unlimitedSkippings;

@property(nonatomic, readwrite, strong, null_resettable) ZCSNoAds *noAds;

@property(nonatomic, readwrite, strong, null_resettable) ZCSSmartCaching *smartCaching;

@property(nonatomic, readwrite, strong, null_resettable) ZCSPreCaching *preCaching;

@property(nonatomic, readwrite, strong, null_resettable) ZCSProfileChanged *profileChanged;

@property(nonatomic, readwrite, strong, null_resettable) ZCSRateUs *rateUs;

@end

/**
 * Clears whatever value was set for the oneof 'event'.
 **/
void ZCSEvent_ClearEventOneOfCase(ZCSEvent *message);

#pragma mark - ZCSEventPackage

typedef GPB_ENUM(ZCSEventPackage_FieldNumber) {
  ZCSEventPackage_FieldNumber_EventsArray = 1,
  ZCSEventPackage_FieldNumber_SendTimeUtc = 2,
};

@interface ZCSEventPackage : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZCSEvent*> *eventsArray;
/** The number of items in @c eventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventsArray_Count;

/** send time of message (in case the bunch of messages is delivered they should have the same send_time), UTC. Format: "2010-12-30 20:02:35.566867" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sendTimeUtc;
/** Test to see if @c sendTimeUtc has been set. */
@property(nonatomic, readwrite) BOOL hasSendTimeUtc;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
